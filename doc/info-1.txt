I will start a series of posts where I will show how I use Common Lisp to 
build a site as a personal project. My intention is to write at least a post
every week. For setting up the environment to work with Common Lisp check
out this article: 
http://razvanpopa.blogspot.ro/2013/01/instalare-clozure-common-lisp-pe.html 
about setting it on a Raspberry Pi, it should be about the same to do it on
a regular PC or laptop.

First you need to install Emacs, Quicklisp and a Common Lisp implementation
- I'm using Clozure Common Lisp (CCL).

When I start a session I start up Emacs, type M-x slime <RET> to start and 
connect to CCL, and open the lucru.lisp (lucru means work in Romanian, name
your file as you wish) using the following shortcut: C-x C-f lucru.lisp <RET>.
Mini-Emacs-dictionary:
- what one would usually call window is called a frame in Emacs, it contains
the whole Emacs application, menu bar and window title
- in this frame there can be more than one Emacs windows
- in each Emacs window you edit a single buffer, which can be the content of
a file on a disk or simply some text, unsaved on the disk
So Emacs has a big frame, where you can see more windows.
In Emacs "C" stands for Control key, and "M" for "Alt". Apple keyboards may
look different but I'm not using one so you'll have to search the net to
find the correct mappings.

Some more keyboard shortcuts for Emacs: C-x 1 in a window to make it be as 
large as the whole Emacs frame, then C-x 2 or C-x 3 to split it horizontally
or vertically. In one of the windows I cand press C-x <left arrow> or 
C-x <right arrow> to cycle between open buffers. This way, I have the CCL REPL
in one of the buffers and in the other the working file, namely lucru.lisp.
I switch windows using cu C-x o. In the non-REPL window I can evaluate 
expressions by pressing C-x e when the cursor is at the end of the expression.
C-M k deletes the current S-expression.
C-M e and C-M a let you move back and forth between S-expressions. 
C-a and C-e move the cursor at the beginning or at the end of the current line.
If there should appear an error (focus is moved to a window with a list of
options with numbers to their left - the restarts - followed by a list of 
calls also with numbers to their left in decreasing order - the call stack) 
the easiest way out is to press q (quit) in that window.


Common Lisp books available on the web:
- "Practical Common Lisp" by Peter Seibel, really good book for beginners and
not only; Peter explains theoretical aspects and also shows how one can use 
them practically; free at http://gigamonkeys.com/book/; [PCL]
- "On Lisp" by Paul Graham, dedicated to a large extent to studying macros;
it does require a minimum of CL knowledge; 
http://www.paulgraham.com/onlisptext.html; [OL]
- "Let Over Lambda" by Doug Hoyte, explains other macro techniques; 
http://letoverlambda.com/index.cl/toc; [LOL]
- "The Common Lisp HyperSpec", "Successful Lisp" etc

OK, let's get to work!

----------------------------
What is it I want to create?
----------------------------
Vreau sa fac un site despre masini. In el vei putea sa faci diverse cautari 
despre masini noi, dupa diverse criterii gen capacitate cilindrica, numar de 
usi sau tip combustibil, ideea de baza fiind sa ajut pe cineva care cauta o 
masina noua sa-si gaseasca un model cat mai apropiat de ce are nevoie.
Vreau sa am mai multe colectii de date. Vreau sa am modele de masini, fiecare 
masina avand atributele sale proprii. Atributele sa nu fie chiar la liber, 
sa nu poti introduce ca si caracteristica a vehiculului orice text, ci sa fie 
restrictionate la un anumit set, pastrat intr-o alta colectie. Eventual la un 
moment dat sa pun si niste tipuri pe atribute.

In prima faza incarc cateva biblioteci si creez pachetul in care voi lucra. 
Un pachet este o colectie de simboluri, faptul ca imi scriu codul intr-un 
pachet este oarecum echivalent cu a scrie intr-un namespace in C#. 
<pre>
(ql:quickload '(:hunchentoot))

(defpackage :cars-site
    (:use :cl :hunchentoot))

(in-package :cars-site)
</pre>
Functia in-package face ca pachetul respectiv sa devina curent.

Pun niste "infrastructura" pentru atribute:
<pre>
(defparameter *all-attributes* nil)

(defvar *attribute-ids* 0)

(defun get-next-attribute-id ()
  (incf *attribute-ids*))

(defclass attribute ()
  ((name :initarg :name :initform (error "Attribute's name?") :accessor name)
   (id :initarg :id :initform (get-next-attribute-id) :reader id)
   (att-type :initarg :type :initform 'string :accessor att-type)))

(defun add-attribute (att)
  "Should check for existing attribute"
    (if (find-attribute-by-name (name att))
        (error "There is already an attribute by this name"))
    (push att *all-attributes*)
  	att)

(defun find-attribute-by-name (name)
  (find name *all-attributes* 
	:test #'(lambda (to-find item) (string= (name item) to-find))))

(defun search-attribute-by-name (partial-name)
  (loop
    for a in *all-attributes*
    when
      (search partial-name (name a) :test #'string-equal)
    collect a))
</pre> 
*all-attributes* este colectia de atribute. *attribute-id* este ca o secventa, 
va genera id-urile atributelor atunci cand acestea sunt adaugate in colectie. 
Aceste doua variabile, fiind definite cu defparameter si respectiv defvar, 
sunt variabile speciale si pot fi accesate din orice punct din program.

get-next-attribute-id returneaza urmatorul id de atribut. 
find-attribute-by-name cauta precis un atribut dupa un nume, iar 
search-attribute-by-name cauta dupa portiuni din nume. 
Diferenta de test la cele doua functii de cautare provine din faptul ca 
find-... are ca argument numele exact al atributului, iar 
search-... poate sa primeasca si un string cu alta capitalizare 
decat numele real al atributului. add-attribute adauga un atribut nou, 
daca nu exista deja unul cu acelasi nume.

Am definit si o clasa de obiecte, attribute, care are 3 campuri momentan:
- name care trebuie sa fie initializat la crearea instantei, altfel va rezulta 
o eroare/conditie
- id care poate fi initializat la crearea instantei, dar daca nu se intampla lucrul acesta isi ia el automat valoarea apeland get-next-attribute-id
- type care este implicit 'string

In Common Lisp exista un sistem de obiecte care se numeste CLOS (Common Lisp 
Object System). Cu acesta se pot crea sabloane de obiecte (clase) si instante 
de obiecte (entitati concrete create conform sablonului). Clasele pot contine 
sloturi, similare campurilor din limbajele obisnuite de programare. Metodele 
sunt implementate "in afara claselor" ca functii generice care sunt apoi 
specializate pe baza tipurilor parametrilor. Pentru detalii mai multe vezi 
capitolele 16 si 17, care se refera la CLOS, din [PCL].

<pre>
(add-attribute (make-instance 'attribute :name "Capacitate cilindrica"))
(add-attribute (make-instance 'attribute :name "Numar usi"))
(add-attribute (make-instance 'attribute :name "Forma"))
(add-attribute (make-instance 'attribute :name "Tip combustibil"))
(add-attribute (make-instance 'attribute :name "Culoare"))
</pre>
Am adaugat un numar minim de atribute. make-instance creeaza o instanta noua 
de clasa, aici se pot introduce initarg-uri, similare cu parametrii 
constructorilor din alte limbaje de programare.
 
Similar voi proceda si pentru masini:
<pre>
(defclass vehicle ()
  ((name :initarg :name :initform (error "What is the vehicle's name?") 
	 :accessor name)
   (id :initarg :id :initform (get-next-car-id) :reader id)
   (attributes :initform '())))

(defparameter *all-vehicles* nil)

(defvar *vehicle-ids* 0)

(defun get-next-vehicle-id ()
  (incf *vehicle-ids*))

(defun add-vehicle (vehicle)
  (push vehicle *all-vehicles*)
  vehicle)

(defun find-vehicle (i)
  "Finds a vehicle by its id"
  (find i *all-vehicles* :test #'(lambda (to-find y) (= (id y) to-find))))

(add-vehicle (make-instance 'vehicle :name "Volkswagen Golf 4 1.9 TDI 90CP"))
(add-vehicle (make-instance 'vehicle :name "Mazda 3 1.6 105CP"))
(add-vehicle (make-instance 'vehicle :name "Dacia Duster Laureate 1.5 dCi 110CP"))

</pre>
Am adaugat variabila *all-vehicles* in care voi stoca toate obiectele masina, 
definite prin clasa vehicle.
